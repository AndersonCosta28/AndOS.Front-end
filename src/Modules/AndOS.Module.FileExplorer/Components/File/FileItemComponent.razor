@inherits SystemItemBaseComponent
@inject ILogger<FileItemComponent> Logger
@namespace AndOS.Module.FileExplorer.Components.File
@using AndOS.Application.Dialogs.SelectProgramToOpenFile
@using AndOS.Module.FileExplorer.Components.File.Dialogs
@using AndOS.Module.FileExplorer.Components.File.Dialogs.Delete
@using AndOS.Module.FileExplorer.Enums

<div @ref=_container
     id="@IdElement"
     style=@containerStyle
     @onclick="(e) => LocalSelect(e, !Selected)"
     @oncontextmenu=ShowMenuItemsAsync
     @ondblclick=OpenAsync>
    @if (FileExplorerConfig is FileExplorerConfig
        {
            Mode: ModeFileExplorer.SelectOne or ModeFileExplorer.SelectMultiple
        })
    {
        <FluentCheckbox Style=@checkboxStyle Value=Selected ValueChanged=LocalSelect
                        onclick="event.stopPropagation();event.preventDefault()" />
    }
    <BlazorBootstrap.Icon Name="BlazorBootstrap.IconName.FileEarmarkText" Style=@iconStyle />
    <FluentLabel Style=@labelStyle Alignment="HorizontalAlignment.Center">@($"{Content.Name}.{Content.Extension}")</FluentLabel>
</div>

@code {
    [Parameter] public ChildrenFileDTO Content { get; set; }

    string labelStyle => $"height: 20px; width: 120px; text-wrap: {_textWrap}; overflow: {_textOverflow}; text-overflow: ellipsis;";
    string containerStyle => $"background-color: {_backgroundColorFocus}; user-select: none; padding: 10px; margin: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center; width: 150px; position: relative; border-radius: 10px; height: 150px;";
    string iconStyle => "width: 90px; height: 90px; font-size: 90px;";
    string checkboxStyle => "position: absolute; top: 0px; left: 0px;";
    protected override void OnInitialized()
    {
        _logger = Logger;
        MenuItem menuItemOpen = new("Open", OpenAsync, callBackDisabled: () => Task.FromResult(!FileExplorerConfig.CanOpenFiles));
        MenuItem menuItemRename = new("Rename", RenameAsync);
        MenuItem menuItemDelete = new("Delete", DeleteAsync);
        MenuItem menuItemProperties = new("Properties", PropertiesAsync);
        this._menuItems.AddRange([menuItemOpen, menuItemRename, menuItemDelete, menuItemProperties]);
        base.OnInitialized();
    }
    async Task RenameAsync()
    {

        DialogParameters dialogParams = new() { Width = "300px", };
        await DialogService.ShowDialogAsync<DialogRenameFile>(Content, dialogParams);
    }

    async Task DeleteAsync()
    {
        DialogParameters parameters = new() { Width = "300px", };
        await DialogService.ShowDialogAsync<DialogDeleteFile>(Content, parameters);
    }

    async Task OpenAsync()
    {
        if (!FileExplorerConfig.CanOpenFiles)
            return;
        Dictionary<string, object> arguments = [];
        arguments["FileId"] = this.Content.Id;
        var response = await UserPreferenceService.GetDefaultProgramByExtensionAsync(new(Content.Extension));
        if (!string.IsNullOrWhiteSpace(response.DefaultProgramToExtension.Program))
        {
            var program = ProgramManager.Programs.Find(x => x.Name == response.DefaultProgramToExtension.Program);
            if (program != null)
            {
                await ProcessManager.StartAsync(program, arguments);
                return;
            }
        }
        var param = new DialogParameters()
            {
                Title = $"Select program",
                Modal = false,
                Width = "30%",
                Height = "70%",
                PreventScroll = true
            };
        var content = new SelectProgramToOpenFileParams(Content.Extension);

        var dialog = await DialogService.ShowDialogAsync<SelectProgramToOpenFileDialog>(content, param);
        var result = await dialog.Result;
        if (result.Cancelled && result.Data is null)
            return;

        var programSelected = (Program)result.Data;
        await ProcessManager.StartAsync(programSelected, arguments);
    }

    Task PropertiesAsync()
    {
        return Task.CompletedTask;
    }
}
