@using AndOS.Application.Components
@using AndOS.Core.Extensions
@using AndOS.Module.UserConfiguration.Components.Accounts.Dialogs
@inject NavigationManager NavManager
@inject ILogger<PreferencesComponent> Logger
@inherits AndOSBaseComponent
@namespace AndOS.Module.UserConfiguration.Preferences

<FluentButton OnClick="create">
    <BlazorBootstrap.Icon Name="BlazorBootstrap.IconName.PlusCircle" />
</FluentButton>
<FluentButton OnClick="refreshGrid">
    <BlazorBootstrap.Icon Name="BlazorBootstrap.IconName.ArrowCounterclockwise" />
</FluentButton>

<div style="height: 434px; overflow:auto;" tabindex="-1">
    <FluentDataGrid @ref="grid" ItemsProvider="defaultProgramToExtensionProvider" Virtualize="true" ItemSize="46" GenerateHeader="GenerateHeaderOption.Sticky" TGridItem="DefaultProgramToExtensionDTO">
        <PropertyColumn Title="Extension" Property="@(c => c!.Extension)" />
        <PropertyColumn Title="Program" Property="@(c => c!.Program)" />
        <TemplateColumn Title="Actions" Align="@Align.End">
            <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(async () => await edit(context))" />
            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async () => await delete(context))" />
        </TemplateColumn>
    </FluentDataGrid>
</div>

@code {
    FluentDataGrid<DefaultProgramToExtensionDTO> grid;
    GridItemsProvider<DefaultProgramToExtensionDTO> defaultProgramToExtensionProvider = default!;
    protected override void OnInitialized()
    {
        _logger = Logger;
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        defaultProgramToExtensionProvider = async req =>
        {
            var response = await UserPreferenceService.GetUserPreferenceAsync(req.CancellationToken);
            return GridItemsProviderResult.From(items: response.DefaultProgramsToExtensions, totalItemCount: response.DefaultProgramsToExtensions.Count);
        };
    }

    async Task refreshGrid()
    {
        _logger.Log(LogLevel.Debug, "{0} called", nameof(refreshGrid));
        grid.SetLoadingState(true);
        await grid!.RefreshDataAsync();
        grid.SetLoadingState(false);
    }

    async Task create()
    {
        var dialog = await DialogService.ShowDialogAsync<DialogCreate>(new()
            {
                Width = "25vw",
                Height = "60vh",
                OnDialogClosing = EventCallback.Factory.Create<DialogInstance>(this, async (instance) => { await refreshGrid(); })
            });
    }

    async Task edit(DefaultProgramToExtensionDTO item)
    {
        await DialogService.ShowDialogAsync<DialogUpdate>(item, new()
            {
                Width = "25vw",
                Height = "60vh",
                OnDialogClosing = EventCallback.Factory.Create<DialogInstance>(this, async (instance) =>{ await refreshGrid(); })
            });
    }

    async Task delete(DefaultProgramToExtensionDTO item)
    {
        await UserPreferenceService.DeleteDefaultProgramToExtensionAsync(new(item.Extension));
        await refreshGrid();
    }
}