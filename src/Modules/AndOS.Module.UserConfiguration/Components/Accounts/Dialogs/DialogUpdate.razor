@using AndOS.Core.Enums
@using AndOS.Core.Schemas
@using AndOS.Core.StorageConfigs
@using AndOS.Shared.Requests.Accounts.Update
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using AndOS.Module.UserConfiguration.Components.Accounts.Dialogs.Partials
@using System.Text.Json
@inject ILogger<DialogUpdate> Logger
@inject IDialogService IDialogService
@inject IToastService ToastService
@inject IAccountService AccountService
@implements IDialogContentComponent<AccountDTO>
@namespace AndOS.Module.UserConfiguration.Components.Accounts.Dialogs

<FluentDialogHeader>
    <FluentLabel Typo="Typography.H2">Update Account</FluentLabel>
</FluentDialogHeader>

<FluentDialogBody Style="overflow: auto; padding: 20px;">
    <FluentStack Orientation="Orientation.Horizontal">
        <FluentTextField @bind-Value=Content.Name Name="Label" Label="Label" Pattern="@AccountSchema.RegexName"
                         Minlength="@AccountSchema.MinLenghtName" Maxlength="@AccountSchema.MaxLenghtName" />

        <FluentSelect Label="Cloud service" TOption=CloudStorage Items="@(Enum.GetValues<CloudStorage>())"
                      OptionText="@(v => v.GetDescription(false))" OptionValue="@(v => ((byte)v).ToString())"
                      @bind-SelectedOption=@Content.CloudStorage />
    </FluentStack>
    <FluentDivider />
    <br />
    <br />
    @if (Content.CloudStorage == CloudStorage.Azure_BlobStorage)
    {
        <AzureBlobStoragePartialComponent Content="azureConfig" />
    }
    else if (Content.CloudStorage == CloudStorage.GCP_CloudStorage)
    {
        <GcpStorageCloudPartialComponent Content="gcpStorageConfig" />
    }
    else
    {
        <AwsS3PartialComponent Content="awsS3Config" />
    }

</FluentDialogBody>

<FluentDialogFooter>
    <FluentStack VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.Center">
        <FluentButton Loading=_loading Type="ButtonType.Submit" Appearance="Appearance.Accent" OnClick=Submit>
            Save
        </FluentButton>
    </FluentStack>
</FluentDialogFooter>

@code {
    [Parameter] public AccountDTO Content { get; set; } = default!;
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    bool _loading { get; set; } = false;
    AzureBlobStorageConfig azureConfig { get; set; } = new();
    AwsS3Config awsS3Config { get; set; } = new();
    GcpStorageConfig gcpStorageConfig { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var config = await AccountService.GetConfigAsync(new(Content.Id));
        azureConfig = JsonSerializer.Deserialize<AzureBlobStorageConfig>(config) ?? new();
        awsS3Config = JsonSerializer.Deserialize<AwsS3Config>(config) ?? new();
        gcpStorageConfig = JsonSerializer.Deserialize<GcpStorageConfig>(config) ?? new();
        await base.OnInitializedAsync();
    }

    async Task Submit()
    {
        try
        {
            _loading = true;

            UpdateAccountRequest request = new()
                {
                    Id = Content.Id,
                    Name = Content.Name,
                    CloudStorage = Content.CloudStorage,
                    Config = GetJsonDocument()
                };
            await AccountService.UpdateAsync(request);
            await Dialog.CloseAsync();
        }
        catch (Exception e)
        {
            Logger.LogError(e, null);
            ToastService.ShowError("Error update Account:\n" + e.Message);
        }
        finally
        {
            _loading = false;
        }
    }

    JsonDocument GetJsonDocument()
    {
        var jsonString = Content.CloudStorage switch
        {
            CloudStorage.Azure_BlobStorage => JsonSerializer.Serialize(azureConfig),
            CloudStorage.AWS_S3Storage => JsonSerializer.Serialize(awsS3Config),
            CloudStorage.GCP_CloudStorage => JsonSerializer.Serialize(gcpStorageConfig),
            _ => JsonSerializer.Serialize(new { })
        };

        var jsonDocument = JsonDocument.Parse(jsonString);
        return jsonDocument;
    }
}